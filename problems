####################################################################
#Multiplication tables
Create a function that accepts dimensions, of Rows x Columns, as parameters in order to create a multiplication table sized according to the given dimensions. **The return value of the function must be an array, and the numbers must be Fixnums, NOT strings.

Example:

multiplication_table(3,3)

1 2 3
2 4 6
3 6 9

-->[[1,2,3],[2,4,6],[3,6,9]]

Each value on the table should be equal to the value of multiplying the number in its first row times the number in its first column.

#Solution#
def multiplication_table(row,col):
    rows = []
    for i in range(1,row + 1):
        rows.append(i)
    length = len(rows)
    result = []
    for i in rows:
        new_row = []
        for j in range(1,col + 1):
            num = i * j
            new_row.append(num)
        result.append(new_row)
    
    return result
    
##################################################################
#John's messy list
John has invited some friends. His list is:

s = "Fred:Corwill;Wilfred:Corwill;Barney:Tornbull;Betty:Tornbull;Bjon:Tornbull;Raphael:Corwill;Alfred:Corwill";
Could you make a program that

makes this string uppercase
gives it sorted in alphabetical order by last name.
When the last names are the same, sort them by first name. Last name and first name of a guest come in the result between parentheses separated by a comma.

So the result of function meeting(s) will be:

"(CORWILL, ALFRED)(CORWILL, FRED)(CORWILL, RAPHAEL)(CORWILL, WILFRED)(TORNBULL, BARNEY)(TORNBULL, BETTY)(TORNBULL, BJON)"
It can happen that in two distinct families with the same family name two people have the same first name too.

#Solution#
def meeting(s):
    first = s.split(";")
    new_list = []
    for item in first:
        sub = item.split(":")
        item = "" + str(sub[1]) + ", " + str(sub[0]) + ""
        item = item.upper()
        new_list.append(item)
        
    sorted_list = sorted(new_list)
    res = ""
    for j in sorted_list:
        added_str = "(" + str(j) + ")"
        res = res + added_str
    return res
    
#######################################################################################
#A Dict from a string
The main idea is to count all the occurring characters in a string. If you have a string like aba, then the result should be {'a': 2, 'b': 1}.

What if the string is empty? Then the result should be empty object literal, {}

#Solution#

def count(string):
    res_dict = {}
    if string == (''):
        return res_dict
    else: 
        for item in string:
            if item in res_dict.keys():
                res_dict[item] = res_dict[item] + 1 
            else:
                res_dict[item] = 1
    return res_dict


#######################################################################################



